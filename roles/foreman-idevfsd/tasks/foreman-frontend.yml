- name: "Directories"
  file:
    state: directory
    recurse: yes
    path: "{{ item }}"
  with_items:
    - "{{ foreman_frontend_config_dir }}"
    - "{{ foreman_frontend_build_dir }}"
  tags: foreman.frontend.image

- name: "{{ foreman_frontend_build_dir }}/Dockerfile"
  copy:
    dest: "{{ foreman_frontend_build_dir }}/Dockerfile"
    content: >-
      {{ lookup("template", "Dockerfile.frontend") }}
  tags:
    - foreman.frontend.image
    - foreman.frontend.dockerfile

- name: "Homemade Ruby code"
  copy:
    src: "{{ item }}"
    dest: "{{ foreman_frontend_build_dir }}/{{ item }}"
  with_items:
    - reboot_to_reinstall_ext.rb
    - ip_from_request_env.rb
  tags:
    - foreman.frontend.image

- name: "{{ foreman_frontend_image }}"
  docker_image:
    name: "{{ foreman_frontend_image }}"
    source: build
    force_source: yes
    build:
      pull: no     # Don't re-pull
      path: '{{ foreman_frontend_build_dir }}'
  tags: foreman.frontend.image

- name: "Foreman configuration files"
  copy:
    dest: "{{ foreman_frontend_config_dir }}/{{ item }}"
    content: >-
      {{ lookup("template", item | basename) }}
  with_items:
    - database.yml
    - settings.yaml
    - foreman_column_view.yaml
  register: _foreman_configuration_files

- name: "`rake db:migrate` (schema creation / upgrade)"
  docker_container:
    name: "foreman_{{ inventory_environment }}_db_migrate"
    image: "{{ foreman_frontend_image }}"
    detach: no
    cleanup: yes
    mounts: "{{ foreman_frontend_mounts }}"
    command:
      - bundle
      - exec
      - bin/rake
      - db:migrate
    container_default_behavior: no_defaults
  register: _foreman_db_migrate
  changed_when: >-
    (_foreman_db_migrate is defined)
    and
    (_foreman_db_migrate.container is defined)
    and
    (_foreman_db_migrate.container.Output is defined)
    and
    ("migrated" in _foreman_db_migrate.container.Output)

- when: foreman_kubespray_remote_git_path is defined
  name: "Obtain vendor path for foreman_kubespray plugin"
  changed_when: false
  docker_container:
    name: "foreman-{{ inventory_environment }}-kubespray-inspect"
    image: "{{ foreman_frontend_image }}"
    detach: no
    cleanup: yes
    command: >-
      bash -c "echo -n /home/foreman/vendor/ruby/*/bundler/gems/foreman_kubespray-*"
    container_default_behavior: no_defaults
  register: _foreman_kubespray_gem_path

- name: "Foreman front-end running in Docker"
  docker_container:
    name: "{{ foreman_frontend_container_name }}"
    image: "{{ foreman_frontend_image }}"
    detach: yes
    restart_policy: unless-stopped
    state: started
    restart: >-
      {{ (
           (_foreman_db_migrate is defined)
           and
           (_foreman_db_migrate is changed)
         )
         or
         (
           (_foreman_configuration_files is defined)
           and
           _foreman_configuration_files.results
           and
           (_foreman_configuration_files.results | any("changed"))
         )
      }}
    log_driver: json-file
    log_options:
      max-size: 50m
      max-file: "3"
    mounts: >-
      {{ foreman_frontend_mounts +
         ( foreman_kubespray_developer_mounts if foreman_kubespray_remote_git_path is defined
           else [] )
      }}
    labels:
      traefik.enable: "true"
      traefik.docker.network: "{{ foreman_docker_network_name }}"
      traefik.http.routers.foreman.tls: "true"
      traefik.http.routers.foreman.rule: >-
        PathPrefix(`/`)
      traefik.http.routers.foremanhttp.rule: >-
        PathPrefix(`/unattended/`)
      traefik.http.routers.foremanhttp.tls: "false"
      traefik.http.routers.foremanhttp.entrypoints: "websecure"
    env:
      FOREMAN_ENV: production
      FOREMAN_BIND: tcp://0.0.0.0:3000
      ## RTFS @ https://github.com/theforeman/foreman/blob/develop/db/seeds.d/050-taxonomies.rb#L9
      SEED_ORGANIZATION: "{{ foreman_main_organization_name }}"
      SEED_LOCATION: "{{ foreman_main_location_name }}"
    container_default_behavior: no_defaults
    networks_cli_compatible: no
    purge_networks: yes  ## No default network
    networks:
      - name: "{{ foreman_docker_network_name }}"
  vars:
    foreman_kubespray_developer_mounts:
      - type: bind
        source: "{{ _safe_foreman_kubespray_remote_git_path }}"
        target: "{{ _safe_foreman_kubespray_gem_path_container_Output | trim }}"
        # Since foreman_kubespray_developer_mounts gets evaluated no
    # matter what (even when we don't want it to be), we must be extra
    # careful:
    _safe_foreman_kubespray_gem_path_container_Output: >-
      {{ _foreman_kubespray_gem_path.container.Output
      | default('(unknown gem path in container)') }}
    _safe_foreman_kubespray_remote_git_path: >-
      {{ foreman_kubespray_remote_git_path
      | default('(unknown remote git path)') }}

- name: "Wait for front-end to be operational"
  uri:
    force: yes
    url: "{{ foreman_frontend_url }}"
    validate_certs: no
  register: result
  until: result is success
  retries: 10
  delay: 3

- name: "Administrator password"
  rails_script:
    interpreter: "{{ foreman_docker_rails_interpreter }}"
    postcondition: |
      User::try_to_login "{{ foreman_admin_user }}", "{{ foreman_admin_password }}"
    action: |
      admin = User.unscoped.find_by_login "{{ foreman_admin_user }}"
      admin.upgrade_password "{{ foreman_admin_password }}"
      admin.save
    recheck: yes

- name: "Ubuntu 20.04"
  environment: "{{ foreman_api_environment }}"
  theforeman.foreman.operatingsystem:
    name: Ubuntu
    release_name: focal
    family: Debian
    major: "20"
    minor: "04"
    password_hash: SHA256
    ## “x86_64” architecture, “Ubuntu mirror” media and “Preseed
    ## default LVM” partition table template are all pre-seededin
    ## Foreman
    architectures:
      - x86_64
    media:
      - "Ubuntu mirror"
    ptables:
      - "Preseed default LVM"
  tags:
    - foreman.config.os

- name: "xaas.epfl.ch domain"
  environment: "{{ foreman_api_environment }}"
  theforeman.foreman.domain:
    name: xaas.epfl.ch
    organizations: "{{ foreman_main_organization_name }}"
    locations: "{{ foreman_main_location_name }}"
  tags:
    - foreman.config.domain

- name: "/24 subnets"
  environment: "{{ foreman_api_environment }}"
  theforeman.foreman.subnet:
    name: "{{ item }}.0/24"
    network: "{{ item }}.0"
    mask: "255.255.255.0"
    gateway: "{{ item }}.1"
    boot_mode: "Static"
  with_items: "{{ foreman_slash24_subnets }}"
  tags:
    - foreman.config.subnets

- name: "idevfsdesis host group"
  environment: "{{ foreman_api_environment }}"
  theforeman.foreman.hostgroup:
    name: idevfsdesis
    root_pass: idevfsdesis   ## Only usable during install, reset afterwards
    organization: "{{ foreman_main_organization_name }}"
    locations: "{{ foreman_main_location_name }}"
    domain: xaas.epfl.ch
    operatingsystem: "Ubuntu 20.04"
    medium: "Ubuntu mirror"
    ptable: "Preseed default LVM"
  tags:
    - foreman.config.hostgroup

- include_vars:
    name: foreman_inventory
    file: "../../../foreman-inventory.yml"
  tags:
    - foreman.config.rules

- name: "Discovery rules"
  rails_script:
    interpreter: "{{ foreman_docker_rails_interpreter }}"
    action: |
      changes = { :created => [], :hostname => [],
                  :search => [], :hostgroup => [] }
      {% for host in foreman_inventory %}
      {% set hostgroup_name = foreman_inventory[host].hostgroup %}
      {% set rule_name = host + "@" + hostgroup_name %}
      hostgroup = Hostgroup.find_by(name: "{{ hostgroup_name }}")

      rule = DiscoveryRule.find_or_create_by(name: "{{ rule_name }}")
      if rule.id.nil? then changes[:created].append "{{ host }}" end

      {# Those are requirements of the ActiveRecord model,
       # and therefore do not count as changes. #}
      rule.organizations = hostgroup.organizations
      rule.locations = hostgroup.locations
      if rule.priority == 0
        rule.priority = DiscoveryRule::suggest_priority
      end

      if rule.hostname != "{{ host }}"
        rule.hostname = "{{ host }}"
        changes[:hostname].append "{{ host }}"
      end

      search = "mac = {{ foreman_inventory[host].macaddress }}"
      if rule.search != search
        rule.search = search
        changes[:search].append "{{ host }}"
      end

      if rule.hostgroup != hostgroup
        rule.hostgroup = hostgroup
        changes[:hostgroup].append "{{ host }}"
      end

      rule.save or raise "Could not save rule {{ rule_name }}"
      {% endfor %}

      exit_json(:changed => (not changes.values.flatten.empty?),
                :changes => changes)
  tags:
    - foreman.config.rules

- name: "Administrator password"
  rails_script:
    interpreter: "{{ foreman_docker_rails_interpreter }}"
    postcondition: |
      User::try_to_login "{{ foreman_admin_user }}", "{{ foreman_admin_password }}"
    action: |
      admin = User.unscoped.find_by_login "{{ foreman_admin_user }}"
      admin.upgrade_password "{{ foreman_admin_password }}"
      admin.save
    recheck: yes

- name: "Connect to smart proxy"
  environment: "{{ foreman_api_environment }}"
  theforeman.foreman.smart_proxy:
    name: "{{ foreman_smartproxy_name }}"
    ## Use a FQDN because some API endpoints (e.g. the one when
    ## the smart proxy is done with some remote ssh execution)
    ## perform DNS-based authentication:
    url: "http://{{ foreman_smartproxy_container_name }}.{{ foreman_docker_network_name }}:8000"
    organizations:
      - "{{ foreman_main_organization_name }}"
    locations:
      - "{{ foreman_main_location_name }}"
    state: present

- name: "unattended_url"
  environment: "{{ foreman_api_environment }}"
  theforeman.foreman.setting:
    name: "unattended_url"
    value: >-
      {{ foreman_frontend_url | replace("https://", "http://") }}

- name: "ssl_ca_file"
  ## Having a “real” CA is necessary for Foreman's new (in v2.3)
  ## registration by dynamically-generated shell script feature:
  environment: "{{ foreman_api_environment }}"
  theforeman.foreman.setting:
    name: "ssl_ca_file"
    value: "{{ foreman_frontend_selfsigned_cert_path }}"

- name: "Ubuntu 20.04"
  environment: "{{ foreman_api_environment }}"
  theforeman.foreman.operatingsystem:
    name: Ubuntu
    release_name: focal
    family: Debian
    major: "20"
    minor: "04"
    password_hash: SHA256
    ## Literal values below are all pre-seeded during Foreman install
    architectures:
      - x86_64
    media:
      - "Ubuntu mirror"
    ptables:
      - "Preseed default LVM"
    provisioning_templates:
      ## See explanations below
      - "Discovery Debian kexec"
      - "Preseed default"
      - "Preseed default finish"
      - "Preseed default user data"
      - "Linux registration default"
  tags:
    - foreman.config.os

- name: "Ubuntu 20.04 default templates"
  environment: "{{ foreman_api_environment }}"
  theforeman.foreman.os_default_template: "{{ item }}"
  with_items:
    - operatingsystem: "Ubuntu 20.04"
      ## This says how the PXE-less discovery process
      ## (https://theforeman.org/plugins/foreman_discovery/15.0/index.html#5.3PXE-lessdiscovery)
      ## boots into install mode:
      template_kind: "kexec"
      provisioning_template: "Discovery Debian kexec"
      ## This governs the main install process
    - operatingsystem: "Ubuntu 20.04"
      template_kind: "provision"
      provisioning_template: "Preseed default"
    - operatingsystem: "Ubuntu 20.04"
      template_kind: "finish"
      provisioning_template: "Preseed default finish"
    - operatingsystem: "Ubuntu 20.04"
      template_kind: "registration"
      provisioning_template: "Linux registration default"

- name: "Ubuntu 20.04 mirror"
  environment: "{{ foreman_api_environment }}"
  theforeman.foreman.installation_medium:
    name: "Ubuntu mirror"
    path: "http://install.iccluster.epfl.ch/mirrors/ubuntu/ubuntu"
    organizations:
      - "{{ foreman_main_organization_name }}"
    locations:
      - "{{ foreman_main_location_name }}"

- name: "Import `kubespray' Ansible role from smart proxy"
  # There no `kubespray` role in Kubespray. This is a fake role that
  # the Docker entry point script sets up (see
  # ../templates/docker-entrypoint-smartproxy.sh) so as to import
  # the variables we want into Foreman, and only these.
  rails_script:
    interpreter: "{{ foreman_docker_rails_interpreter }}"
    postcondition: |
      ! AnsibleRole.find_by(:name => "kubespray").nil?
    recheck: yes
    action: |
      ForemanAnsible::ApiRolesImporter.new(
          SmartProxy.find_by(:name => "{{ foreman_smartproxy_name }}")
      ).import_role_names["new"].map do |role|
        if role.name == "kubespray"
          role.save
          exit_json(:changed => true)
        end
      end
      exit_json(:failed => true, :message => "Could not find `kubespray' role")
  tags: foreman.config.kubespray

- name: "Import Ansible variables for “kubespray” role"
  rails_script:
    interpreter: "{{ foreman_docker_rails_interpreter }}"
    action: |
      kubespray_vars = ForemanAnsible::VariablesImporter.new(
        SmartProxy.find_by :name => "{{ foreman_smartproxy_name }}"
      ).import_variable_names([]).values.flatten.select do |v|
        v.ansible_role.name == "kubespray"
      end

      changes = []
      for v in kubespray_vars do
        v.override = true
        if v.changed?
          changes.push v.key
          v.save
        end
      end

      exit_json(:changed => ! changes.empty?,
                :changes => changes)
  tags: foreman.config.kubespray

- name: "“{{ foreman_kubespray_job_template_name }}” custom job template for ansible-runner"
  include_tasks:
    file: foreman-config-kubespray-job-template.yml
    apply:
      tags:
        - foreman.config.kubespray
        - foreman.config.kubespray.jobtemplate
  tags:
    - foreman.config.kubespray
    - foreman.config.kubespray.jobtemplate
